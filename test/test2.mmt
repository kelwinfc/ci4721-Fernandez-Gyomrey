char unChar;
[3]int a;
[3:5]int b;
[4][3:5]int c;
string d = "hola";
[3]float e;
^int f;
^^int g;
^[3]int h;
^int i;
[3]^int z;

enum color{
    amarillo, azul, rojo, marron
}

enum asdf{
    rojo, amarillo, verde, verde, violeta, marron
}

type cuadrado {
    int a;
    float b;
}

type prueba {
    char a;
    boolean b;
    boolean e;
    int c;
    float d;
    int f;
}

type cuadradoBox {
    cuadrado a;
}

union intYFloat {
    int a;
    float b;
    cuadradoBox c;
    prueba d;
}

union aux {
    char a;
    boolean b;
    int c;
    float d;
}

fun none peru(cuadrado a){
    
}

fun int hola(int c){
    c = 3;
    print (2*c) as float;
    return 0;
}

fun none pasoReferencia(const [3]int b, const cuadrado a, 
                        const aux holaTuChico){
    pasoReferencia(b,a,holaTuChico);
}

fun none probarArreglo(const [3]int c, const aux unAux){
    c[0] = 1;
    unAux.a = 'a';
    const int holaTu = 3;
    ^int b;
    b = @holaTu;
}

fun none main(){
    f = g^;
    int a = 3;
    f = @@g^^^;
    color c1;
    c1 = amarillo;
    
    f = @c[3][2];
    
    cuadrado cr;
    int x = cr.a;
    float y = cr.b;
    
    cuadrado z = cr;
    cuadradoBox boxZ;
    
    z = boxZ.a;
    y = boxZ.a.b;
    
    ^int leApuntador = @x;
    intYFloat intF;
    
    int leParteDeUnion = intF.a;
    
    print 2,
          3,
          4;
}
